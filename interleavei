#!/usr/bin/env python

# GY170807

''' interleavei: intelligent FASTA/Q interleaving '''


from __future__ import print_function  # Py2
from argparse import ArgumentParser, FileType, SUPPRESS
from collections import namedtuple
from math import ceil
from signal import signal, SIGPIPE, SIG_DFL
from sys import stdin, stderr, stdout

try:
    from itertools import zip_longest as zl
except:
    from itertools import izip_longest as zl  # Py2


# Globals #####################################################################


signal(SIGPIPE, SIG_DFL)  # Gracefully handle downstream PIPE closure

# data structures
seqrecord = namedtuple('seqrecord', ['seqid', 'seq', 'quals'])


# Classes #####################################################################


class MultiReader(object):
    ''' A class for reading FASTA/Q records '''

    def __init__(self, inputstream):
        self._fileobj = inputstream
        self._buffer = ' '

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        pass

    def __iter__(self):
        return self

    def __next__(self):
        while self._buffer and self._buffer[0] not in ('>', '@'):
            self._buffer = self._fileobj.readline()
        if not self._buffer:
            raise StopIteration
        if self._buffer[0] == ">":
            seqid = self._buffer[1:].strip()
            self._buffer = self._fileobj.readline()
            seqlines = []
            while self._buffer and self._buffer[0] not in ('>', '@'):
                seqlines.append(self._buffer.strip())
                self._buffer = self._fileobj.readline()
            return seqrecord(seqid, ''.join(seqlines).upper(), '')
        else:
            seqid = self._buffer[1:].strip()
            seq = self._fileobj.readline().strip().upper()
            self._fileobj.readline()
            quals = self._fileobj.readline().strip()
            self._buffer = self._fileobj.readline()
            return seqrecord(seqid, seq, quals)

    next = __next__  # Py2 compatibility


# Functions ###################################################################


def grouper(iterable, k):
    ''' Yield a memory-mapped iterable in chunks of `k` '''
    for i in range(int(ceil(float(len(iterable)) / k))):  # Py2
        yield iterable[i*k:i*k+k]


def printseq(seqid, seq, quals='', fileobj=stdout):
    ''' Appropraitely prints a sequence '''
    if quals:
        print('@{}\n{}\n+\n{}'.format(seqid, seq, quals), file=fileobj)
    elif 'wrap' not in args:
        print('>{}\n{}'.format(seqid, seq), file=fileobj)
    else:
        print('>{}'.format(seqid, file=fileobj))
        for chunk in grouper(seq, args.wrap):
            print(chunk, file=fileobj)


###############################################################################


if __name__ == '__main__':

    parser = ArgumentParser(
        description='intelligent FASTA/Q interleaving',
        argument_default=SUPPRESS)
    parser.add_argument(
        '-u', dest='unpaired', nargs='*', type=FileType('r'),
        help='Unpaired input file(s) (use "-" or leave blank for stdin)')
    parser.add_argument(
        '-1', dest='firstread', nargs='*', type=FileType('r'),
        help='First read file(s)')
    parser.add_argument(
        '-2', dest='secondread', nargs='*', type=FileType('r'),
        help='Second read file(s)')
    parser.add_argument(
        '-w', '--wrap', nargs='?', type=int, const=80,
        help='Wrap lines at `w` when outputting FASTA (default %(const)s when \
        supplied alone)')
    args = parser.parse_args()

    # -u and or both of -1 and -2 are expected
    # if nothing is provided, assume -u and read stdin
    if any(k in args for k in ('firstread', 'secondread')):

        if not all(k in args for k in ('firstread', 'secondread')):
            parser.error('Both `-1` and `-2` must be set together')

        for f1, f2 in zip(args.firstread, args.secondread):
            brokenpairs = {}
            with MultiReader(f1) as F1, MultiReader(f2) as F2:
                for read1, read2 in zl(F1, F2, fillvalue=None):
                    if read1:
                        r1id = read1.seqid.split(' ')[0]
                    if read2:
                        r2id = read2.seqid.split(' ')[0]
                    if read1 and read2 and r1id == r2id:
                        printseq(*read1)
                        printseq(*read2)
                    else:
                        if read1:
                            if r1id in brokenpairs:
                                printseq(*read1)
                                printseq(*brokenpairs.pop(r1id))
                            else:
                                brokenpairs[r1id] = read1
                        if read2:
                            if r2id in brokenpairs:
                                printseq(*read2)
                                printseq(*brokenpairs.pop(r2id))
                            else:
                                brokenpairs[r2id] = read2
            if brokenpairs:
                print('Dropped {} reads from {} and {}'.format(
                    len(brokenpairs), f1.name, f2.name), file=stderr)

    elif 'unpaired' not in args:
        args.unpaired = [stdin]

    if 'unpaired' in args:
        for f in args.unpaired:
            brokenpairs = {}
            with MultiReader(f) as F:
                for read in F:
                    rid = read.seqid.split(' ')[0]
                    if rid in brokenpairs:
                        printseq(*read)
                        printseq(*brokenpairs.pop(rid))
                    else:
                        brokenpairs[rid] = read
            if brokenpairs:
                print('Dropped {} reads from {}'.format(
                    len(brokenpairs), f.name), file=stderr)
