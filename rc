#!/usr/bin/env python

# GY171017

''' rc: reverse complement '''


from __future__ import print_function  # Py2
from argparse import ArgumentParser, FileType, SUPPRESS
from collections import namedtuple
from math import ceil
from signal import signal, SIGPIPE, SIG_DFL
from sys import stdin, stdout


# Globals #####################################################################


signal(SIGPIPE, SIG_DFL)  # Gracefully handle downstream PIPE closure

# translation pattern for reverse-complement
try:
    _acgt_comp = str.maketrans('ATUCGXNRYWSKMDVHB', 'TAAGCXNYRWSMKHBDV')
except:
    from string import maketrans  # Py2
    _acgt_comp = maketrans('ATUCGXNRYWSKMDVHB', 'TAAGCXNYRWSMKHBDV')

# data structures
seqrecord = namedtuple('seqrecord', ['seqid', 'seq', 'quals'])


# Classes #####################################################################


class MultiReader(object):
    ''' A class for reading FASTA/Q records '''

    def __init__(self, inputstream):
        self._fileobj = inputstream
        self._buffer = ' '

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        pass

    def __iter__(self):
        return self

    def __next__(self):
        while self._buffer and self._buffer[0] not in ('>', '@'):
            self._buffer = self._fileobj.readline()
        if not self._buffer:
            raise StopIteration
        if self._buffer[0] == ">":
            seqid = self._buffer[1:].strip()
            self._buffer = self._fileobj.readline()
            seqlines = []
            while self._buffer and self._buffer[0] not in ('>', '@'):
                seqlines.append(self._buffer.strip())
                self._buffer = self._fileobj.readline()
            return seqrecord(seqid, ''.join(seqlines).upper(), '')
        else:
            seqid = self._buffer[1:].strip()
            seq = self._fileobj.readline().strip().upper()
            self._fileobj.readline()
            quals = self._fileobj.readline().strip()
            self._buffer = self._fileobj.readline()
            return seqrecord(seqid, seq, quals)

    next = __next__  # Py2 compatibility


# Functions ###################################################################


def rcomp(record):
    ''' Reverse complement a seqrecord '''
    return record._replace(
        seq=record.seq[::-1].translate(_acgt_comp),
        quals=record.quals[::-1])


def grouper(iterable, k):
    ''' Yield a memory-mapped iterable in chunks of `k` '''
    for i in range(int(ceil(float(len(iterable)) / k))):  # Py2
        yield iterable[i*k:i*k+k]


def printseq(seqid, seq, quals='', fileobj=stdout):
    ''' Appropraitely prints a sequence '''
    if quals:
        print('@{}\n{}\n+\n{}'.format(seqid, seq, quals), file=fileobj)
    elif 'wrap' not in args:
        print('>{}\n{}'.format(seqid, seq), file=fileobj)
    else:
        print('>{}'.format(seqid), file=fileobj)
        for chunk in grouper(seq, args.wrap):
            print(chunk, file=fileobj)


###############################################################################


if __name__ == '__main__':

    parser = ArgumentParser(
        description='Reverse complement',
        argument_default=SUPPRESS)
    parser.add_argument(
        'input', nargs='*', type=FileType('r'), default=[stdin],
        help='Input file(s) (use "-" or leave blank for stdin)')
    parser.add_argument(
        '-w', '--wrap', nargs='?', type=int, const=80,
        help='Wrap lines at `w` when outputting FASTA (default %(const)s when \
        supplied alone)')

    args = parser.parse_args()

    for f in args.input:
        with MultiReader(f) as F:
            for record in F:
                printseq(*rcomp(record))
