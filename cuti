#!/usr/bin/env python

# GY190923


''' cuti: ordering and selection of columnar data '''


from argparse import ArgumentParser, FileType, SUPPRESS
from signal import signal, SIGPIPE, SIG_DFL
from sys import stdin, stderr

signal(SIGPIPE, SIG_DFL)  # Gracefully handle downstream PIPE closure


###############################################################################


if __name__ == '__main__':

    parser = ArgumentParser(
        description='Ordering and selection of columnar data',
        epilog='Column names passed with `-n` but missing in the `input`, \
        will be included as empty columns in the output, allowing variably \
        sized or formatted files to be standardised. A warning is passed \
        to stderr when this occurs.',
        argument_default=SUPPRESS)
    col_group = parser.add_mutually_exclusive_group(required=True)

    parser.add_argument(
        'input', nargs='*', type=FileType('r'), default=[stdin],
        help='Input file(s) (use "-" or leave blank for stdin)')
    col_group.add_argument(
        '-n', '--names', type=str, nargs='+',
        help='Ordered (space separated) list of column names')
    col_group.add_argument(
        '-N', '--names_file', type=FileType('r'),
        help='Ordered (newline separated) list of column names in a file')
    col_group.add_argument(
        '-f', '--fields', type=str,
        help='Ordered (comma separated) list or ranges of column numbers \
        (1-based inclusive [1,n]) e.g. "1,3-4,2,5-8"')
    parser.add_argument(
        '-d', '--in_delim', type=str, default='\t',
        help='Column delimter for input (default TAB)')
    parser.add_argument(
        '-D', '--out_delim', type=str, default='\t',
        help='Column delimter for output (default TAB)')
    parser.add_argument(
        '--fill', default='',
        help='Pad value for missing columns (in conjunction with `-n`/`-N`) \
        (default "")')

    args = parser.parse_args()

    if 'fields' in args:
        sniff = args.input[0].readline().strip('\r\n').split(args.in_delim)
        col_order = []
        for field in args.fields.split(','):
            if '-' not in field:
                col_order.append(int(field)-1)
            else:
                if field.startswith('-'):
                    field = '1' + field
                elif field.endswith('-'):
                    field += f'{len(sniff)}'
                start, stop = field.split('-')
                col_order += [i for i in range(int(start)-1, int(stop))]
        if any(i >= len(sniff) for i in col_order):
            raise ValueError('Defined columns exceed number in input')
        print(args.out_delim.join([sniff[i] for i in col_order]))
        for f in args.input:
            while l := f.readline().strip('\r\n').split(args.in_delim):
                print(args.out_delim.join([l[i] for i in col_order]))
            f.close()

    else:  # Column names provided with -n or -N
        if 'names_file' in args:
            args.names = [l.strip('\r\n') for l in args.names_file]
            args.names_file.close()
        for f in args.input:
            sniff = f.readline().strip('\r\n').split(args.in_delim)
            col_order = [sniff.index(field) if field in sniff else None
                for field in args.names]
            if any(field is None for field in col_order):
                print(f'{f.name}: Missing columns fill be padded with `--fill`', file=stderr)
            print(args.out_delim.join(args.names))
            while l := f.readline().strip('\r\n').split(args.in_delim):
                print(args.out_delim.join(
                    [l[i] if i is not None else args.fill for i in col_order]))
            f.close()
