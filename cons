#!/usr/bin/env python

# GY190919

''' cons: intelligent consensus formation '''


from argparse import ArgumentParser, FileType, SUPPRESS
from bisect import insort
from collections import defaultdict as dd, namedtuple
from collections.abc import Iterable
from math import ceil
from signal import signal, SIGPIPE, SIG_DFL
from sys import stdin, stdout, stderr
from typing import Dict, Iterator, NamedTuple, TextIO, Union

signal(SIGPIPE, SIG_DFL)  # Gracefully handle downstream PIPE closure


# Globals #####################################################################


NUMBER = Union[int, float]

IUPAC_NTS_TO_AMBIG = {
    'AG': 'R', 'CT': 'Y', 'CG': 'S', 'AT': 'W', 'GT': 'K', 'AC': 'M',
    'CGT': 'B', 'AGT': 'D', 'ACT': 'H', 'ACG': 'V',
    'ACGT': 'N'}
IUPAC_AMBIG_TO_NTS = {v: k for k, v in IUPAC_NTS_TO_AMBIG.items()}


# Classes #####################################################################


class SeqRecord(NamedTuple):
    ''' A class for holding sequence data '''
    seqid: str
    seq: str
    quals: str = ''

    def __len__(self):
        return len(self.seq)

    def print(self, wrap: int=0, fileobj: TextIO=stdout) -> None:
        ''' Print a sequence as FASTA/Q '''
        if self.quals:
            print(f'@{self.seqid}\n{self.seq}\n+\n{self.quals}', file=fileobj)
        elif wrap:
            print(f'>{self.seqid}', file=fileobj)
            for g in grouper(self.seq, wrap):
                print(g, file=fileobj)
        else:
            print(f'>{self.seqid}\n{self.seq}', file=fileobj)


class DepthRange(NamedTuple):
    start: int
    stop: int
    depth: int


class FastaReader(object):
    ''' A class for reading FASTA records'''

    def __init__(self, inputstream, replaceU: bool=False):
        self._fileobj = inputstream
        self._buffer = self._fileobj.readline()
        self.replaceU = replaceU

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        pass

    def __iter__(self):
        return self

    def __next__(self) -> SeqRecord:
        while self._buffer and not self._buffer.startswith('>'):
            self._buffer = self._fileobj.readline()
        if not self._buffer:
            raise StopIteration
        seqid = self._buffer[1:].strip('\r\n')
        self._buffer = self._fileobj.readline()
        seqlines = []
        while self._buffer and not self._buffer.startswith('>'):
            seqlines.append(self._buffer.strip('\r\n'))
            self._buffer = self._fileobj.readline()
        seq = ''.join(seqlines).upper()
        if self.replaceU:
            seq = seq.replace('U', 'T')
        return SeqRecord(seqid, seq)


class RunningMedian(object):

    def __init__(self, values: Union[NUMBER, Iterator[NUMBER]]=[]):
        if isinstance(values, Iterable):
            self.values = sorted(values)
        else:
            self.values = [values]
        self.median = self._median() if self.values else 0

    def __str__(self):
        return str(self.median)

    def __repr__(self):
        return self.__str__()

    def _median(self) -> NUMBER:
        ''' Return the median '''
        if len(self.values) & 1:
            return self.values[len(self.values)//2]
        return (self.values[len(self.values)//2-1] + \
            self.values[len(self.values)//2]) / 2

    def update(self, values: Union[NUMBER, Iterator[NUMBER]]) -> None:
        if isinstance(values, Iterable):
            for v in values:
                insort(self.values, v)
        else:
            insort(self.values, values)
        self.median = self._median()


# Functions ###################################################################


def consensus_base(base: Dict[str, int], iupac: bool=False) -> str:
    ''' Decide the consensus at a base position '''

    if '-' in base:
        del(base['-'])
        if not base:  # Return gap only
            return '-'
    if len(base) == 1:
        return base.popitem()[0]  # Return unambiguous
    nts = {'A': 0, 'C': 0, 'G': 0, 'T': 0}
    for k, v in base.items():
        try:  # Standard base
            nts[k] += v
        except:  # IUPAC ambiguous base
            for nt in IUPAC_AMBIG_TO_NTS[k]:
                nts[nt] += v
    nts = sorted([(k, v) for k, v in nts.items()],
        key=lambda x: x[1], reverse=True)
    if not iupac:
        nts = [nt for nt in nts if nt[1] == nts[0][1]]
        if len(nts) == 1:
            return nts[0][0]  # Return majority
        return 'N'  # Return majority indecision
    else:
        nts = [nt for nt in nts if nt[1] >= (nts[0][1] * iupac)]
        if len(nts) == 1:
            return nts[0][0]  # Return majority
        return IUPAC_NTS_TO_AMBIG[''.join(sorted([nt[0] for nt in nts]))]  # Return iupac indecision


def grouper(iterable: Iterator, k: int) -> Iterator[Iterator]:
    ''' Yield a memory-mapped `iterable` in chunks of `k`
    !!! If iterable % k != 0 the length of the last chunk will be <k !!! '''
    for i in range(len(iterable) // k + (1 if len(iterable) % k else 0)):
        yield iterable[i*k:i*k+k]


def printseq(seqid: str, seq: str, quals: str='', wrap: int=0, fileobj: TextIO=stdout) -> None:
    ''' Appropraitely prints a sequence '''
    if quals:
        print(f'@{seqid}\n{seq}\n+\n{quals}', file=fileobj)
    elif wrap:
        print(f'>{seqid}', file=fileobj)
        for chunk in grouper(seq, wrap):
            print(chunk, file=fileobj)
    else:
        print(f'>{seqid}\n{seq}', file=fileobj)


###############################################################################


if __name__ == '__main__':

    parser = ArgumentParser(
        description='cons: intelligent consensus formation',
        argument_default=SUPPRESS)
    parser.add_argument(
        'input', nargs='?', type=FileType('r'), default=stdin,
        help='Input FASTA alignment file (use "-" or leave blank for stdin)')
    parser.add_argument(
        '-n', '--name', required=True,
        help='Sequence identifier for the consensus')
    parser.add_argument(
        '-a', '--ambig', nargs='?', const=0.5, type=float,
        help='Use IUPAC ambiguity codes to represent positions where any base \
        is >= `a` fold as frequent as the most frequent nucleotide at the \
        position (default %(const)s)')
    parser.add_argument(
        '-m', '--min', default=2, nargs='?', type=int,
        help='Only ever report sites >= depth `m` (default %(default)s)')
    parser.add_argument(
        '-g', '--glo', const=0.2, nargs='?', type=float,
        help='(Exdends `m`) Per-site depth must be >= this proportion of the \
        deepest position within the alignment (%(const)s) when supplied alone)')
    parser.add_argument(
        '-l', '--loc', const=0.5, nargs='?', type=float,
        help='(Extends `m`) Per-site depth must be >= this proportion of the \
        local alignment depth (see `s`) (%(const)s when supplied alone)')
    parser.add_argument(
        '-s', '--smooth', default=50, nargs='?', type=int,
        help='Size of local areas for use with `-l` (default %(default)s)')
    parser.add_argument(
        '-w', '--wrap', nargs='?', type=int, const=80, default=0,
        help='Wrap lines at `w` when outputting FASTA (%(const)s when \
        supplied alone)')
    parser.add_argument(
        '--retaingaps', action='store_true', default=False,
        help='Retain gap characters in consensus (useful for comparing to \
        original alignment)')
    parser.add_argument(
        '--changepoints', action='store_true', default=False,
        help='Print the changepoints detected with `-l` to stderr (start, \
        stop, median depth)')
    args = parser.parse_args()

    with FastaReader(args.input, True) as F:
        for i, record in enumerate(F):
            if not i:
                aln = [dd(int) for _ in range(len(record))]
            for j, base in enumerate(record.seq):
                aln[j][base] += 1
    args.input.close()

    totaldepth = i + 1
    maxdepth = max(totaldepth - base.get('-', 0) for base in aln)

    if 'loc' not in args:

        depth_req = max(args.min, ceil(args.glo * maxdepth) if 'glo' in args else 0)
        cons = [consensus_base(base, args.ambig if 'ambig' in args else False)
            if totaldepth - base.get('-', 0) >= depth_req else '-' for base in aln]

    else:

        ranges = []
        depthsequence = []
        start = 0
        rm = RunningMedian(sum(v for k, v in aln[0].items() if k != '-'))
        for i, base in enumerate(aln[1:], 1):
            base_depth = sum(v for k, v in base.items() if k != '-')
            # Changepoint if depth differs from the running median +- 10% slop
            if rm.median * 0.9 < base_depth < rm.median * 1.1:
                rm.update(base_depth)
            else:
                ranges.append(DepthRange(start, i-1, rm))
                depthsequence += [rm.median] * (i - start)
                start = i
                rm = RunningMedian(base_depth)
        ranges.append(DepthRange(start, i, rm))

        _ranges = [ranges[0]]
        for dr in ranges[1:]:
            # Next range is within slop - extend previous
            if _ranges[-1].depth.median * 0.9 <= dr.depth.median <= _ranges[-1].depth.median * 1.1:
                _ranges[-1] = _ranges[-1]._replace(stop=dr.stop)
                _ranges[-1].depth.update(dr.depth.values)
            # Next range is deeper - allow through
            elif dr.depth.median > _ranges[-1].depth.median:
                _ranges.append(dr)
            # Next range is shallower ...
            # Do we return to a higher depth within smoothing window?
            else:
                smoothing_range = depthsequence[dr.start:dr.start+args.smooth]
                if len(smoothing_range) != args.smooth:
                    _ranges[-1] = _ranges[-1]._replace(stop=dr.stop)
                    continue
                # We return to current range within slop or to a deeper range - extend previous
                if max(smoothing_range) > _ranges[-1].depth.median * 0.9:
                    _ranges[-1] = _ranges[-1]._replace(stop=dr.stop)
                # The depth drop is longer than the smoothing window - allow change
                else:
                    _ranges.append(dr)
        ranges = _ranges

        if args.changepoints:
            for dr in ranges:
                print(*dr, file=stderr)

        cons = []
        for dr in ranges:
            depth_req = maxdepth - max(args.min, ceil(args.loc * dr.depth.median),
                ceil(args.glo * maxdepth) if 'glo' in args else 0)
            cons += [consensus_base(base, args.ambig if 'ambig' in args else False)
                if base.get('-', 0) <= depth_req else '-' for base in aln[dr.start:dr.stop+1]]

    if not args.retaingaps:
        cons = [base for base in cons if base != '-']
    printseq(args.name, ''.join(cons), wrap=args.wrap)
